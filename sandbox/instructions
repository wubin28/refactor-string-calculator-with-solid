Given this simple implementation of string calculator, mid way, how 
would you refactor this, based on SOLID principles? and how far would 
you go?

Please note what principles you think this code breaks, and why it is 
important that it implement them, if at all. show how you refactored 
it in a gist.

Kata: String Calculator

Before you start

• Try not to read ahead.
• Do one task at a time. The trick is to learn to work incrementally.
• There is no need to test for invalid inputs for this kata, assume 
the string you receive is correctly formatted.

1. Create a simple String calculator with a method int Add(string numbers)
• The method can take 0, 1 or 2 numbers, and will return their 
sum (for an empty string it will return 0) for example “” or “1” or “1,2”
• Start with the simplest test case of an empty string and move to one 
and two numbers
• Remember to solve things as simply as possible
• Remember to refactor after each passing test

2. Allow the Add method to handle an unknown amount of numbers

3. Allow the Add method to handle newlines between numbers instead of 
commas.
• The following input is valid: “1\n2,3” (will equal 6)
• The following input is not valid: “1,\n” (no need to handle 
this in your code)

4. Support different delimiters
• To change a delimiter, the beginning of the string will contain a 
separate line that looks like this: 
“//[delimiter]\n[numbers...]” 
for example “//;\n1;2” should return three since the delimiter is ‘;’ .
• The first line is optional, so all existing scenarios 
should still be supported, (existing tests should still pass).

5. Calling Add with a negative number should throw an exception 
“negatives not allowed”. The exception message should include 
the negative that was passed. If there are multiple negatives, 
list all of them in the message.
