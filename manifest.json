{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculatorTest.java:5: error: cannot find symbol\n@RunWith(JUnitParamsRunner.class)\n         ^\n  symbol: class JUnitParamsRunner\nStringCalculatorTest.java:17: error: cannot find symbol\n    @Parameters(method=\"getInputAndExpected\")\n     ^\n  symbol:   class Parameters\n  location: class StringCalculatorTest\nStringCalculator.java:19: error: incompatible types: char cannot be converted to String\n        String[] numbers = input.split(',');\n                                       ^\nStringCalculatorTest.java:21: error: cannot find symbol\n        int result = sc.Add(input);\n                       ^\n  symbol:   method Add(String)\n  location: variable sc of type StringCalculator\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n","instructions":"Kata: String Calculator\n\nBefore you start\n\n• Try not to read ahead.\n• Do one task at a time. The trick is to learn to work incrementally.\n• There is no need to test for invalid inputs for this kata, assume \nthe string you receive is correctly formatted.\n\n1. Create a simple String calculator with a method int Add(string numbers)\n• The method can take 0, 1 or 2 numbers, and will return their \nsum (for an empty string it will return 0) for example “” or “1” or “1,2”\n• Start with the simplest test case of an empty string and move to one \nand two numbers\n• Remember to solve things as simply as possible\n• Remember to refactor after each passing test\n\n2. Allow the Add method to handle an unknown amount of numbers\n\n3. Allow the Add method to handle newlines between numbers instead of \ncommas.\n• The following input is valid: “1\\n2,3” (will equal 6)\n• The following input is not valid: “1,\\n” (no need to handle \nthis in your code)\n\n4. Support different delimiters\n• To change a delimiter, the beginning of the string will contain a \nseparate line that looks like this: \n“//[delimiter]\\n[numbers...]” \nfor example “//;\\n1;2” should return three since the delimiter is ‘;’ .\n• The first line is optional, so all existing scenarios \nshould still be supported, (existing tests should still pass).\n\n5. Calling Add with a negative number should throw an exception \n“negatives not allowed”. The exception message should include \nthe negative that was passed. If there are multiple negatives, \nlist all of them in the message.\n\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.junit.runner.RunWith;\n\n@RunWith(JUnitParamsRunner.class)\npublic class StringCalculatorTest {\n\n    private static final Object[] getInputAndExpected() {\n        return new Object[] {\n            new Object[] {\"\", 0},\n            new Object[] {\"1\", 1},\n            new Object[] {\"1,2\", 3}\n        };\n    }\n\n    @Test\n    @Parameters(method=\"getInputAndExpected\")\n    public void add_empty_defaultResults(String input, int expected)\n    {\n        StringCalculator sc = new StringCalculator();\n        int result = sc.Add(input);\n    \n        assertEquals(result, expected);\n    }\n}","StringCalculator.java":"public class StringCalculator {\n    public int DEFAULT_RESULT = 0;\n\n    public int add(String input) {\n        if (input.equals(\"\")) {\n            return DEFAULT_RESULT;\n        }\n        if (input.contains(\",\")) {\n            return handleMultiple(input);\n        }\n        return parseSingle(input);\n    }\n\n    private static int parseSingle(String input) {\n        return Integer.parseInt(input);\n    }\n\n    private int handleMultiple(String input) {\n        String[] numbers = input.split(',');\n        return add(numbers[0]) + add(numbers[1]);\n    }\n}\n"}